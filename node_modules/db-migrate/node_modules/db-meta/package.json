{
  "author": {
    "name": "Jeff Kunkle",
    "email": "jkunkle@nearinfinity.com"
  },
  "name": "db-meta",
  "keywords": [
    "database",
    "db",
    "metadata",
    "postgres"
  ],
  "description": "Relational database metadata extraction library",
  "version": "0.4.1",
  "license": "MIT",
  "main": "./lib/db-meta.js",
  "bugs": {
    "url": "https://github.com/nearinfinity/node-db-meta/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nearinfinity/node-db-meta.git"
  },
  "dependencies": {},
  "devDependencies": {
    "chai": "~1.1.0",
    "mocha": "~1.2.1",
    "pg": "~0.7.2",
    "mysql": "~0.9.6",
    "sqlite3": "~2.1.5"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.6"
  },
  "scripts": {
    "test": "mocha test/*.js test/**/*.js"
  },
  "readme": "# db-meta\n\nRelational database metadata extraction library\n\nThe following databases are currently supported:\n\n * SQLite3 - via: [node-sqlite3](https://github.com/developmentseed/node-sqlite3)\n * MySQL - via: [node-mysql](https://github.com/felixge/node-mysql)\n * PostgreSQL - via: [node-postgres](https://github.com/brianc/node-postgres)\n\n\n## Installation\n\n    $ npm install db-meta\n\nYou'll also need to install the appropriate driver for the database you want to\nuse db-meta with. None are installed by default.\n\n    # PostgreSQL\n    $ npm install pg\n\n    # MySQL\n    $ npm install mysql\n\n    # SQLite3\n    $ npm install sqlite3\n\n\n## Example Usage\n\n```javascript\nvar dbmeta = require('db-meta');\n\ndbmeta('pg', { database: 'test' }, function(meta) {\n  meta.getVersion(function(err, version) {\n    console.log('postgres version is ' + version);\n  });\n\n  meta.getTables(function(tables) {\n    tables.forEach(function(table) {\n      console.log('table name is ' + table.getName());\n    });\n  });\n\n  meta.getColumns('tablename', function(columns) {\n    columns.forEach(function(column) {\n      console.log('column name is ' + column.getName());\n      console.log('column data type is ' + column.getDataType());\n      console.log('column is nullable? ' + column.isNullable());\n      console.log('column max length is ' + column.getMaxLength());\n    });\n  });\n});\n```\n\n## API\n\n### require('db-meta')(driver, options, callback)\n\nCreates a connection to the database using the specified driver. The options object is passed to the specified\ndriver object.\n\n__Arguments__\n\n* driver - the name of the db-meta driver to use\n* options - an options object passed to the db-meta driver to use when connecting to the database\n* callback(err, driver) - callback that will be invoked after connecting to the database\n\nThe user may pass a connection object in the options argument using the key connection. If this key is included in the options object, the driver will attempt to use the existing connection.\n\n### driver.getVersion(callback)\n\nGet the version of the connected database\n\n__Arguments__\n\n* callback(err, version) - callback invoked with the version information\n\n\n### driver.getTables(callback)\n\nGet an array of table objects representing all user tables in the database\n\n__Arguments__\n\n* callback(err, tables) - callback invoked with an array of tables. See the table API\nbelow for details on the methods available on table objects\n\n\n### Table.getName()\n\nReturns the table's name\n\n\n### driver.getColumns(callback)\n\nGet an array of column objects representing all user columns in the database\n\n__Arguments__\n\n* callback(err, columns) - callback invoked with an array of columns. See the column API\nbelow for details on the methods available on column objects\n\n### Column.getName()\n\nReturns the columns name\n\n### Column.isNullable()\n\nReturns true if the column is nullable, false otherwise\n\n### Column.getDataType()\n\nReturns the data type of the column. See `lib/data-type.js` for a list of valid data types\n\n### Column.getMaxLength()\n\nReturns the max length of the column, if constrained. Only valid for textual columns.\n\n### Column.isPrimaryKey()\n\nReturns true if the column is the primary key, false otherwise\n\n### Column.getDefaultValue()\n\nReturns the default value for the column\n\n## Testing\n\nTo run the tests you'll need a local installation of PostgreSQL, MySQL, and SQLite3 with default user\naccounts. You'll also need to create a schema named `db_meta_test` beforehand (excluding SQLite3) and\ninstall the npm dev dependencies. Finally, you can run all the tests with\n\n    $ npm test\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "db-meta@0.4.1",
  "_from": "db-meta@~0.4.1"
}
